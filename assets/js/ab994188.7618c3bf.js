"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2365],{5680:(e,a,n)=>{n.d(a,{xA:()=>u,yg:()=>g});var t=n(6540);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),p=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},u=function(e){var a=p(e.components);return t.createElement(s.Provider,{value:a},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return n?t.createElement(g,l(l({ref:a},u),{},{components:n})):t.createElement(g,l({ref:a},u))}));function g(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},882:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var t=n(8168),i=(n(6540),n(5680));const r={title:"Packages Composer"},l=void 0,o={unversionedId:"laravel/Installation/StepByStep/package-composer",id:"laravel/Installation/StepByStep/package-composer",title:"Packages Composer",description:"Blade Icons",source:"@site/docs/laravel/Installation/StepByStep/package-composer.md",sourceDirName:"laravel/Installation/StepByStep",slug:"/laravel/Installation/StepByStep/package-composer",permalink:"/documentation/docs/laravel/Installation/StepByStep/package-composer",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/laravel/Installation/StepByStep/package-composer.md",tags:[],version:"current",frontMatter:{title:"Packages Composer"},sidebar:"laravelSidebar",previous:{title:"Laravel Nova",permalink:"/documentation/docs/laravel/Installation/StepByStep/laravel-nova"},next:{title:"Layout Principal",permalink:"/documentation/docs/laravel/Installation/StepByStep/layout-principal"}},s={},p=[{value:"Blade Icons",id:"blade-icons",level:2},{value:"CSS JoliMardi",id:"css-jolimardi",level:2},{value:"Ajouter le submodule au projet",id:"ajouter-le-submodule-au-projet",level:4},{value:"Menu JoliMardi",id:"menu-jolimardi",level:2},{value:"Sections JoliMardi",id:"sections-jolimardi",level:2},{value:"Importer le CSS",id:"importer-le-css",level:3},{value:"Utilisation dans les Views",id:"utilisation-dans-les-views",level:3},{value:"Ajout d&#39;une nouvelle section via Nova",id:"ajout-dune-nouvelle-section-via-nova",level:4},{value:"Metas JoliMardi",id:"metas-jolimardi",level:2},{value:"Flash",id:"flash",level:2},{value:"Debugbar",id:"debugbar",level:2}],u={toc:p},c="wrapper";function d(e){let{components:a,...n}=e;return(0,i.yg)(c,(0,t.A)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"blade-icons"},"Blade Icons"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'composer require blade-ui-kit/blade-icons\ncomposer require codeat3/blade-coolicons\n# Cr\xe9er le dossier qui contiendra les icones "custom" pour le projet\nmkdir ressources/icons\n\nphp artisan vendor:publish --tag=blade-icons\nphp artisan view:clear\n')),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php",metastring:'title="/config/blade-icons.php"',title:'"/config/blade-icons.php"'},"<?php\n\nreturn [\n    'sets' => [\n        'default' => [\n            'path' => 'resources/icons',\n            'prefix' => '',\n        ],\n        // Coolicon est automatiquement dispo en plus de default s'il est install\xe9\n    ],\n\n    // Global Default Classes - applied to all icons by default\n    'class' => 'icon',\n\n    // Evite les icones \xe9normes tant que le css n'est pas charg\xe9\n    'attributes' => [\n        'width' => 24,\n        'height' => 24,\n    ],\n\n    'components' => [\n        // Disable the component, only use directive @svg(...) -> perf boost\n        'disabled' => true,\n    ],\n];\n")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php",metastring:'title="example.blade.php"',title:'"example.blade.php"'},"<body>\n\n    // Pour afficher l'icone custom du projet /ressources/icons/icon-perso.svg\n    @svg('icon-perso')\n\n    // Pour afficher l'icone Coolicons Hamburger\n    @svg('coolicon-hamburger-md')\n\n    // Pour ajouter une classe, c'est le 2nd argument\n    @svg('coolicon-hamburger-md', 'ma-classe-pour-cette-icone')\n\n    // Rendu dans le HTML :\n    <svg class=\"icon ma-classe-pour-cette-icone\" viewBox=\"0 0 24 24\" fill=\"none\"><g>...</g></svg>\n\n</body>\n")),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://blade-ui-kit.com/blade-icons?set=53"},"La liste des ic\xf4nes ici.")),(0,i.yg)("h2",{id:"css-jolimardi"},"CSS JoliMardi"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"cd resources/css\ngit clone https://github.com/jolimardi/jolimardi-css\n")),(0,i.yg)("p",null,"Puis importer le CSS dans le projet :"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-css",metastring:'title="resources/css/app.css"',title:'"resources/css/app.css"'},'@import "jolimardi-css/jolimardi.css";\n')),(0,i.yg)("h4",{id:"ajouter-le-submodule-au-projet"},"Ajouter le submodule au projet"),(0,i.yg)("p",null,"Cr\xe9er ",(0,i.yg)("inlineCode",{parentName:"p"},".gitmodules")," \xe0 la racine du projet :"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-git",metastring:"title='/.gitmodules'",title:"'/.gitmodules'"},'[submodule "resources/css/jolimardi-css"]\n    path = resources/css/jolimardi-css\n    url = https://github.com/jolimardi/jolimardi-css/\n    update = rebase\n    branch = main\n')),(0,i.yg)("admonition",{type:"info"},(0,i.yg)("p",{parentName:"admonition"},"Pour mettre \xe0 jour ce CSS, ex\xe9cuter ",(0,i.yg)("inlineCode",{parentName:"p"},"git submodule update --remote --merge")," (pratique \xe0 mettre dans le Deploy Script de Forge par exemple, apr\xe8s le ",(0,i.yg)("inlineCode",{parentName:"p"},"git pull"),").")),(0,i.yg)("h2",{id:"menu-jolimardi"},"Menu JoliMardi"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'composer require jolimardi/laravel-menu:dev-master\nphp artisan vendor:publish --provider="JoliMardi\\Menu\\MenuServiceProvider" --tag=config\n')),(0,i.yg)("p",null,"Ajouter le component ",(0,i.yg)("inlineCode",{parentName:"p"},"<x-menu/>")," dans un template blade, l\xe0 o\xf9 vous voulez afficher le menu.\nModifier ",(0,i.yg)("inlineCode",{parentName:"p"},"config/menu.yml")," pour ajouter des routes au composant."),(0,i.yg)("h2",{id:"sections-jolimardi"},"Sections JoliMardi"),(0,i.yg)("admonition",{type:"warning"},(0,i.yg)("p",{parentName:"admonition"},"Il faut d'abord installer Nova")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'composer require ebess/advanced-nova-media-library:^4.1.6\nphp artisan vendor:publish --provider="Spatie\\MediaLibrary\\MediaLibraryServiceProvider" --tag="medialibrary-migrations"\nphp artisan migrate\nphp artisan vendor:publish --provider="Spatie\\MediaLibrary\\MediaLibraryServiceProvider" --tag="medialibrary-config"\nphp artisan vendor:publish --tag=nova-media-library\n\ncomposer require jolimardi/laravel-sections:dev-main\nphp artisan vendor:publish --provider="JoliMardi\\MySections\\MySectionsServiceProvider"\nphp artisan migrate\n')),(0,i.yg)("admonition",{type:"info"},(0,i.yg)("p",{parentName:"admonition"},'S\'il y a un probl\xe8me de "minimum stability", modifier composer.json en modifiant ',(0,i.yg)("inlineCode",{parentName:"p"},'"minimum-stability": "dev",'))),(0,i.yg)("p",null,"Il est maintenant possible d'utiliser le composant ",(0,i.yg)("inlineCode",{parentName:"p"},"<x-section><x-section />"),"."),(0,i.yg)("h3",{id:"importer-le-css"},"Importer le CSS"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-css",metastring:'title="resources/css/app.css"',title:'"resources/css/app.css"'},'@import "../../vendor/jolimardi/laravel-sections/dist/sections.css";\n')),(0,i.yg)("h3",{id:"utilisation-dans-les-views"},"Utilisation dans les Views"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php"},"<body>\n    @mySection($all_sections_from_db, $key_of_the_section_to_display)\n</body>\n\n")),(0,i.yg)("details",null,(0,i.yg)("summary",null," Option vid\xe9o youtube"),(0,i.yg)("p",null,"Si vos sections text-with-image ne comprendront pas de vid\xe9o \xe0 la place de l'image. Alors il faut modifier la sections text-with-image en enlevant les partie surlign\xe9."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php",metastring:"title='resources/views/vendor/laravel-sections/text-with-image.blade.php'",title:"'resources/views/vendor/laravel-sections/text-with-image.blade.php'"},"...\n<div class=\"section-image\">\n    // highlight-start\n    @if (isset($section->video_url))\n        <div class=\"video-container\">\n            {{-- <x-youtube :youtube='$section->video_url' :youtube-thumbnail-media=\"$section->getFirstMedia('video_thumbnail')\" /> --}}\n            <x-youtube-inline :youtube='$section->video_url' />\n        </div>\n    @else\n    // highlight-end\n        {{ $section->getFirstMedia('image')->img('', ['alt' => $section->title]) }}\n        // highlight-start\n    @endif\n    // highlight-end\n</div>\n...\n")),(0,i.yg)("p",null,"Sinon, il faut ajouter le composant youtube-inline.blade.php dans ",(0,i.yg)("inlineCode",{parentName:"p"},"resources/views/components")," : "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php",metastring:"title='resources/views/components/youtube-inline.blade.php'",title:"'resources/views/components/youtube-inline.blade.php'"},'@if (isset($youtube))\n    <div class="video-thumbnail ratio-16x9">\n\n        <iframe src="https://www.youtube.com/embed/{{ $youtube }}?&loop=1&playlist={{ $youtube }}&rel=0&controls=1&autoplay=1&mute=1&start=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen=""></iframe>\n\n    </div>\n@endif\n'))),(0,i.yg)("h4",{id:"ajout-dune-nouvelle-section-via-nova"},"Ajout d'une nouvelle section via Nova"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Pr\xe9requis : avoir install\xe9 Laravel Nova (voir plus loin)")),(0,i.yg)("p",null,"Se connecter \xe0 Nova pour ajouter une section. La cl\xe9 est importante pour afficher la section (c'est son ",(0,i.yg)("em",{parentName:"p"},"machine name"),"). Il est possible d'ajouter des types de section (via Nova), puis de cr\xe9er le nouveau template dans ",(0,i.yg)("inlineCode",{parentName:"p"},"/ressources/views/components/vendor/laravel-sections/ma-nouvelle-section.blade.php")),(0,i.yg)("h2",{id:"metas-jolimardi"},"Metas JoliMardi"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'composer require jolimardi/laravel-metas\nphp artisan vendor:publish --provider="JoliMardi\\Metas\\MetasServiceProvider"\n')),(0,i.yg)("p",null,"Ajouter les variables globale : "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php",metastring:'title="app/Http/Controller/Controller.php"',title:'"app/Http/Controller/Controller.php"'},"<?php\n\nnamespace App\\Http\\Controllers;\n\n\nuse Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests;\nuse Illuminate\\Foundation\\Validation\\ValidatesRequests;\nuse Illuminate\\Routing\\Controller as BaseController;\n// highlight-start\nuse JoliMardi\\Metas\\Services\\MetasService;\nuse Illuminate\\Support\\Facades\\View;\n// highlight-end\n\nclass Controller extends BaseController {\n    use AuthorizesRequests, ValidatesRequests;\n\n    // highlight-start\n    public function __construct() {\n        // Chargement des variables globales utilisables dans toutes les vues, et overridables dans les controllers\n        View::share('title', MetasService::getTitle());\n        View::share('description', MetasService::getDescription());\n        View::share('og_image', '/img/example.jpg');\n    }\n    // highlight-end\n}\n")),(0,i.yg)("h2",{id:"flash"},"Flash"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'composer require jolimardi/laravel-flash:dev-master\nphp artisan vendor:publish --provider="JoliMardi\\Flash\\FlashServiceProvider" --tag="views"\n')),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("inlineCode",{parentName:"p"},":dev-main")," permet d'outre-passer la v\xe9rification de stabilit\xe9 pour le moment.")),(0,i.yg)("p",null,"Ajouter l'alias personnalis\xe9 dans ",(0,i.yg)("inlineCode",{parentName:"p"},"config/app.php")," -> ",(0,i.yg)("inlineCode",{parentName:"p"},"aliases"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php",metastring:'title="/config/app.php"',title:'"/config/app.php"'},"<?php\n\nuse Illuminate\\Support\\Facades\\Facade;\nuse Illuminate\\Support\\ServiceProvider;\n\nreturn [\n    ...\n    // Tout en bas du fichier\n\n    'aliases' => Facade::defaultAliases()->merge([\n        //highlight-start\n        'MyFlash' => JoliMardi\\Flash\\Flash::class,\n        //highlight-end\n    ])->toArray(),\n];\n")),(0,i.yg)("p",null,"Utiliser dans un controlleur ",(0,i.yg)("inlineCode",{parentName:"p"},"Flash::success('Ceci est un message de succ\xe8s');"),"."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Retrouvez tout les types de message dans la documentation du package : ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/jolimardi/laravel-flash"},"https://github.com/jolimardi/laravel-flash"))),(0,i.yg)("h2",{id:"debugbar"},"Debugbar"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"composer require barryvdh/laravel-debugbar --dev\n")))}d.isMDXComponent=!0}}]);