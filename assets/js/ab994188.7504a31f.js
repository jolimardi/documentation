"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8928],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>v});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(a),m=r,v=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return a?n.createElement(v,l(l({ref:t},c),{},{components:a})):n.createElement(v,l({ref:t},c))}));function v(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2622:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={title:"Packages Composer"},l=void 0,o={unversionedId:"laravel/Installation/StepByStep/package-composer",id:"laravel/Installation/StepByStep/package-composer",title:"Packages Composer",description:"Blade Icons",source:"@site/docs/laravel/Installation/StepByStep/package-composer.md",sourceDirName:"laravel/Installation/StepByStep",slug:"/laravel/Installation/StepByStep/package-composer",permalink:"/documentation/docs/laravel/Installation/StepByStep/package-composer",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/laravel/Installation/StepByStep/package-composer.md",tags:[],version:"current",frontMatter:{title:"Packages Composer"},sidebar:"laravelSidebar",previous:{title:"Installer Laravel",permalink:"/documentation/docs/laravel/Installation/StepByStep/laravel"},next:{title:"Layout Principal",permalink:"/documentation/docs/laravel/Installation/StepByStep/layout-principal"}},s={},p=[{value:"Blade Icons",id:"blade-icons",level:2},{value:"CSS JoliMardi",id:"css-jolimardi",level:2},{value:"Ajouter le submodule au projet",id:"ajouter-le-submodule-au-projet",level:4},{value:"Menu JoliMardi",id:"menu-jolimardi",level:2},{value:"Sections JoliMardi",id:"sections-jolimardi",level:2},{value:"Importer le CSS",id:"importer-le-css",level:3},{value:"Utilisation dans les Views",id:"utilisation-dans-les-views",level:3},{value:"Ajout d&#39;une nouvelle section via Nova",id:"ajout-dune-nouvelle-section-via-nova",level:4},{value:"Flash",id:"flash",level:2},{value:"Debugbar",id:"debugbar",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"blade-icons"},"Blade Icons"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'composer require blade-ui-kit/blade-icons\ncomposer require codeat3/blade-coolicons\n# Cr\xe9er le dossier qui contiendra les icones "custom" pour le projet\nmkdir ressources/icons\n\nphp artisan vendor:publish --tag=blade-icons\nphp artisan view:clear\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="/config/blade-icons.php"',title:'"/config/blade-icons.php"'},"<?php\n\nreturn [\n    'sets' => [\n        'default' => [\n            'path' => 'resources/icons',\n            'prefix' => '',\n        ],\n        // Coolicon est automatiquement dispo en plus de default s'il est install\xe9\n    ],\n\n    // Global Default Classes - applied to all icons by default\n    'class' => 'icon',\n\n    'components' => [\n        // Disable the component, only use directive @svg(...) -> perf boost\n        'disabled' => true,\n    ],\n];\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="example.blade.php"',title:'"example.blade.php"'},"<body>\n\n    // Pour afficher l'icone custom du projet /ressources/icons/icon-perso.svg\n    @svg('icon-perso')\n\n    // Pour afficher l'icone Coolicons Hamburger\n    @svg('coolicon-hamburger-md')\n\n    // Pour ajouter une classe, c'est le 2nd argument\n    @svg('coolicon-hamburger-md', 'ma-classe-pour-cette-icone')\n\n    // Rendu dans le HTML :\n    <svg class=\"icon ma-classe-pour-cette-icone\" viewBox=\"0 0 24 24\" fill=\"none\"><g>...</g></svg>\n\n</body>\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://blade-ui-kit.com/blade-icons?set=53"},"La liste des ic\xf4nes ici.")),(0,r.kt)("h2",{id:"css-jolimardi"},"CSS JoliMardi"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ressources/css\ngit clone https://github.com/jolimardi/jolimardi-css\n")),(0,r.kt)("p",null,"Puis importer le CSS dans le projet :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="resources/css/app.css"',title:'"resources/css/app.css"'},'@import "jolimardi-css/jolimardi.css";\n')),(0,r.kt)("h4",{id:"ajouter-le-submodule-au-projet"},"Ajouter le submodule au projet"),(0,r.kt)("p",null,"Cr\xe9er ",(0,r.kt)("inlineCode",{parentName:"p"},".gitmodules")," \xe0 la racine du projet :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-git",metastring:"title='/.gitmodules'",title:"'/.gitmodules'"},'[submodule "resources/css/jolimardi-css"]\n    path = resources/css/jolimardi-css\n    url = https://github.com/jolimardi/jolimardi-css/\n    update = rebase\n    branch = main\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Pour mettre \xe0 jour ce CSS, ex\xe9cuter ",(0,r.kt)("inlineCode",{parentName:"p"},"git submodule update --remote --merge")," (pratique \xe0 mettre dans le Deploy Script de Forge par exemple, apr\xe8s le ",(0,r.kt)("inlineCode",{parentName:"p"},"git pull"),").")),(0,r.kt)("h2",{id:"menu-jolimardi"},"Menu JoliMardi"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'composer require jolimardi/laravel-menu:dev-master\nphp artisan vendor:publish --provider="JoliMardi\\Menu\\MenuServiceProvider" --tag=config\n')),(0,r.kt)("p",null,"Ajouter le component ",(0,r.kt)("inlineCode",{parentName:"p"},"<x-menu/>")," dans un template blade, l\xe0 o\xf9 vous voulez afficher le menu.\nModifier ",(0,r.kt)("inlineCode",{parentName:"p"},"config/menu.yml")," pour ajouter des routes au composant."),(0,r.kt)("h2",{id:"sections-jolimardi"},"Sections JoliMardi"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'composer require ebess/advanced-nova-media-library\nphp artisan vendor:publish --provider="Spatie\\MediaLibrary\\MediaLibraryServiceProvider" --tag="migrations"\nphp artisan migrate\nphp artisan vendor:publish --provider="Spatie\\MediaLibrary\\MediaLibraryServiceProvider" --tag="config"\nphp artisan vendor:publish --tag=nova-media-library\n\nphp artisan vendor:publish --provider="JoliMardi\\MySections\\MySectionsServiceProvider"\ncomposer require jolimardi/laravel-sections:dev-main\nphp artisan migrate\n')),(0,r.kt)("p",null,"Il est maintenant possible d'utiliser le composant ",(0,r.kt)("inlineCode",{parentName:"p"},"<x-section><x-section />"),"."),(0,r.kt)("h3",{id:"importer-le-css"},"Importer le CSS"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="resources/css/app.css"',title:'"resources/css/app.css"'},'@import "../../vendor/jolimardi/laravel-sections/dist/sections.css";\n')),(0,r.kt)("h3",{id:"utilisation-dans-les-views"},"Utilisation dans les Views"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<body>\n    @mySection($all_sections_from_db, $key_of_the_section_to_display)\n</body>\n\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null," Option vid\xe9o youtube"),(0,r.kt)("p",null,"Si vos sections text-with-image ne comprendront pas de vid\xe9o \xe0 la place de l'image. Alors il faut modifier la sections text-with-image en enlevant les partie surlign\xe9."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:"title='resources/views/vendor/laravel-sections/text-with-image.blade.php'",title:"'resources/views/vendor/laravel-sections/text-with-image.blade.php'"},"...\n<div class=\"section-image\">\n    // highlight-start\n    @if (isset($section->video_url))\n        <div class=\"video-container\">\n            {{-- <x-youtube :youtube='$section->video_url' :youtube-thumbnail-media=\"$section->getFirstMedia('video_thumbnail')\" /> --}}\n            <x-youtube-inline :youtube='$section->video_url' />\n        </div>\n    @else\n    // highlight-end\n        {{ $section->getFirstMedia('image')->img('', ['alt' => $section->title]) }}\n        // highlight-start\n    @endif\n    // highlight-end\n</div>\n...\n")),(0,r.kt)("p",null,"Sinon, il faut ajouter le composant youtube-inline.blade.php dans ",(0,r.kt)("inlineCode",{parentName:"p"},"resources/views/components")," : "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:"title='resources/views/components/youtube-inline.blade.php'",title:"'resources/views/components/youtube-inline.blade.php'"},'@if (isset($youtube))\n    <div class="video-thumbnail ratio-16x9">\n\n        <iframe src="https://www.youtube.com/embed/{{ $youtube }}?&loop=1&playlist={{ $youtube }}&rel=0&controls=1&autoplay=1&mute=1&start=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen=""></iframe>\n\n    </div>\n@endif\n'))),(0,r.kt)("h4",{id:"ajout-dune-nouvelle-section-via-nova"},"Ajout d'une nouvelle section via Nova"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pr\xe9requis : avoir install\xe9 Laravel Nova (voir plus loin)")),(0,r.kt)("p",null,"Se connecter \xe0 Nova pour ajouter une section. La cl\xe9 est importante pour afficher la section (c'est son ",(0,r.kt)("em",{parentName:"p"},"machine name"),"). Il est possible d'ajouter des types de section (via Nova), puis de cr\xe9er le nouveau template dans ",(0,r.kt)("inlineCode",{parentName:"p"},"/ressources/views/components/vendor/laravel-sections/ma-nouvelle-section.blade.php")),(0,r.kt)("h2",{id:"flash"},"Flash"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'composer require jolimardi/laravel-flash:dev-master\nphp artisan vendor:publish --provider="JoliMardi\\Flash\\FlashServiceProvider" --tag="views"\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},":dev-main")," permet d'outre-passer la v\xe9rification de stabilit\xe9 pour le moment.")),(0,r.kt)("p",null,"Ajouter l'alias personnalis\xe9 dans ",(0,r.kt)("inlineCode",{parentName:"p"},"config/app.php")," -> ",(0,r.kt)("inlineCode",{parentName:"p"},"aliases"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="/config/app.php"',title:'"/config/app.php"'},"<?php\n\nuse Illuminate\\Support\\Facades\\Facade;\nuse Illuminate\\Support\\ServiceProvider;\n\nreturn [\n    ...\n    // Tout en bas du fichier\n\n    'aliases' => Facade::defaultAliases()->merge([\n        //highlight-start\n        'MyFlash' => JoliMardi\\Flash\\Flash::class,\n        //highlight-end\n    ])->toArray(),\n];\n")),(0,r.kt)("p",null,"Utiliser dans un controlleur ",(0,r.kt)("inlineCode",{parentName:"p"},"Flash::success('Ceci est un message de succ\xe8s');"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Retrouvez tout les types de message dans la documentation du package : ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jolimardi/laravel-flash"},"https://github.com/jolimardi/laravel-flash"))),(0,r.kt)("h2",{id:"debugbar"},"Debugbar"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"composer require barryvdh/laravel-debugbar --dev\n")))}d.isMDXComponent=!0}}]);